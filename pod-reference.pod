=encoding utf8

=head1 Perl POD 语法参考

POD 是 Perl 及模块使用的文档格式，全称 Plain Old Documentation。Perl 其中一个亮点特性，就是 POD 这个便捷的文档格式，无论是简单文档或说明，还是撰写整本书，都没有问题。本文将重点总结 POD 语法，同时会罗列一些 POD 周边的工具。

=head2 简介

尽管绝大多程序猿/媛们都希望自己写的一手清晰、漂亮的文档，但多数都苦于没时间去学习现有比较“复杂”的文档处理或排版系统，而且技术文档如果想加入版本控制 Word 等文件格式肯定是不能用的。代码能够很欢快的运行，相信对大家都不是难事，我们擅长的就是编码，不是吗？但如果文档跟不长，项目时间长久以后，或是代码移交其他，或是GitHub 上进行社会化编程，没有文档可是不行的。幸运的是，Perl 提供了这样一种简单而又优雅的文档格式，就是 POD。

POD 是一种简单的文本文档格式，它定义了一系列标记，用于组织和格式化文档，有了这些标记，使用 Perl 或其他转移工具，可以生成美丽漂亮大方的文档或书籍。而且，这些标记文本还可以嵌入到我们的代码文件中去，Perl 解释器在运行代码时会忽略它们，同样，如果你用 POD 转换工具去解析这些代码文件，它会忽略代码部分，转而去处理 POD 文档，这样，极大地方便了我们代码的注释和文档生成。

POD 文档在 Perl 中随处可见，最常用的，比如 perldoc 查看 Perl 文档：

    perldoc LWP::UserAgent

POD 文档转换工具后文会总结。

=head2 POD 语法

POD 是一种类似简单的标记语法文档，文档由以下3种类型的段落构成：

=over

=item * Ordinary 段落

这种段落是最常用的行文段落，可以添加一些加粗、斜体、代码、链接等格式的文本

=item * Verbatim 段落

这种段落通常用于显示代码块或是其他不需要格式“原样显示”的文本

=item * Command 段落

这就是上文所说的标记们，所有的标记都以 = 开头，紧跟命令（中间不能带空格的），命令列表如下：

=back

    =pod
    =head1 Heading Text
    =head2 Heading Text
    =head3 Heading Text
    =head4 Heading Text
    =over indentlevel
    =item stuff
    =back
    =begin format
    =end format
    =for format text...
    =encoding type
    =cut

接下来我们一个个具体看看这些标记怎么用。

=head3 标题 =head<标题级别>

标题 C<< =headI<x> >> 是文档结构划分的重要标记，不同级别的标题如下：

    =head1 一级标题
    =head2 二级标题
    =head3 三级标题
    =head4 四级标题
    ...

=head3 项目编号 =item, =over, =back

项目编号对于熟悉 HTML 的人来说，相当于 <li>, <ol> | <ul>, </ol> | </ul>，要产生一个列表，用 C<< =over >> 开始，以 C<< =item >> 开头的为一个个列表项，然后用C<< =back >> 结尾。不表在 C<< =over .. =back >> 之外使用 C<< =item >>，C<<=over n >> 后面的 n 用来表示缩进的字数，单位是 em，默认是 4。

    =over 4

    =item *

    First item

    =item *

    Second item

    =back

    =over

    =item Foo()

    Description of Foo function

    =item Bar()

    Description of Bar function

    =back

=head3 C<< =for I<formatname> >>, C<< =begin I<formatname> >> 和 C<< =end I<formatname> >>

以 C<< =for >> 开头的一段文字会被 POD 解释器忽略，直接交给指定的格式化语言来处理。例如，下面标明一段 html 文字：

    =for html <hr><img src="thang.png">
    <p>This is a raw HTML paragraph.</p>

这里要注意 POD 中，空一行为一个段落，上面这个 HTML 为一个整落。C<< =begin >> 和 C<< =end >> 所做的事情是一样的，只不过，不再局限于某个段落，如：

    =begin html

    <br>Figure 1.<br><IMG SRC="figure1.png"><br>

    =end html

    =begin text

      ---------------
      |  foo        |
      |        bar  |
      ---------------

    ^^^^ Figure 1. ^^^^

    =end text

目前支技的格式有：roff, man, latex, tex, text, html。如果想添加 POD 注释，也就是添加被 POD 文件转换器忽略的文字，格式名称用 comment 即可：

    =for comment
    Make sure that all the available options are documented!

=head3 文本格式化

=over

=item * C<< IE<lt>textE<gt> >> -- 斜体

用于强调或参数。

=item * C<< BE<lt>textE<gt> >> -- 加粗

用于强调、开关、程序或其他。

=item * C<< CE<lt>code hereE<gt> >> -- 代码

=item * C<< LE<lt>nameE<gt> >> -- 链接

啊，是的，文档中文本格式很重要，但技术文档中链接也很多，这里有必要细说一下，幸运的是，POD 对链接的支持很强的，OK, come on.

=over

=item * C<< LE<lt>nameE<gt> >>

链接到 Perl 文档（如 C<< LE<lt>Net::PingE<gt> >>），同样，也可以链接到 UNIX man 手册，如，C<< LE<lt>crontab(5)E<gt> >>。

=item * C<< LE<lt>name/"sec"E<gt> >> 或 C<< LE<lt>name/secE<gt> >>



=item * C<< LE<lt>/"sec"E<gt> >> 或 C<< LE<lt>name/secE<gt> >>

链接到当前文档的某个部分，如 C<< LE<lt>/"Object Methods"E<gt> >>。

=back

这里所说的“部分”可以是标题，也可能是列表项，如 C<< LE<lt>perlvar/$.E<gt> >> 或 C<< LE<lt>perlvar/"$."E<gt> >> 都是链接到 perlvar 中的 C<< =item $. >> 列表项。同理，C<< LE<lt>perlsyn/For LoopsE<gt> >> 或 C<< LE<lt>perlsyn/"For Loops"E<gt> >> 都是链接到 perlsyn 中的 C<< =head2 For Loops >> 这个标题处。

如果想给链接加个自定义锚文本的话，可以使用 C<< LE<lt>text|..E<gt> >> 这种形式，和上面对应的形式类似，这里只列出，不再赘述：

=over

=item * C<< LE<lt>text|nameE<gt> >>

=item * C<< LE<lt>text|name/"sec"E<gt> >> 或 C<< LE<lt>text|name/secE<gt> >>

=item * C<< LE<lt>text|"sec"E<gt> >> 或 C<< LE<lt>text|/secE<gt> >> 或 C<< LE<lt>text|"sec"E<gt> >>

=back

或是要链接到一个网址：

=over

=item * C<< LE<lt>scheme:...E<gt> >> 或 C<< LE<lt>text|scheme:...E<gt> >>

链接到一个网址 URL，如，C<< LE<lt>http://www.perl.org/E<gt> 或 C<< LE<lt>Perl 官方网站|http://www.perl.org/E<gt> >>。

=item * C<< EE<lt>escapeE<gt> >> -- 字符转义

类似 HTML/XML 的实体

=item * C<< FE<lt>filenameE<gt> >> -- 文件名

=item * C<< SE<lt>textE<gt> >> -- 禁目换行

如 C<< SE<lt>$x ? $y : $zE<gt> >>

=item * C<< XE<lt>topic nameE<gt> >> -- 索引名

=back

=head3 文档中插入代码片段

文档中出现代码和命令是常有的事，有时候可能会觉得字符转义比较头疼。是的，下面这几行代码效果都是 C<$a E<lt>=E<gt> $b>：

    C<$a E<lt>=E<gt> $b>
    C<< $a <=> $b >>
    C<< $a E<lt>=E<gt> $b >>

可以看出来 C<< CE<lt>E<lt> code here E<gt>E<gt> >> 这种写法比较易读，也是我们推荐的代码文本格式，但是要注意的是，C<E<lt>E<lt>> 之后和 C<E<gt>E<gt>> 之前都要有空格，可以写多个，但至少有一个。同时，C<E<lt>> 的个数可以是2个、3个或是更多个，但是开有几个，关也要有对应的个数个 C<E<gt>>。下面这两种写法也是合法的：

    C<<< $a <=> $b >>>
    C<<<<  $a <=> $b     >>>>

再看一个例子：

    C<open(X, "E<gt>E<gt>thing.dat") || die $!>
    C<$foo-E<gt>bar();>

乍一看，代码和 POD 标记混在一起，下面这种写法可读性更强：

    C<<< open(X, ">>thing.dat") || die $! >>>
    C<< $foo->bar(); >>

=head3 文档编码 C<< B<=encoding> I<encodingname> >>

    =encoding latin1
    =encoding utf8
    =encoding koi8-r
    =encoding ShiftJIS
    =encoding big5

本文在 git push 到 GitHut 之前也是添加了 utf8 编码的，否则，中文会乱码的。

=head3 在 Perl 代码中使用 POD

代码中使用 POD 时最重要的是 C<< =cut >> 这个标记，不管是标题还是自定义的文档块，都要有 C<< =cut >> 结束该文档块。代码中可以使用 C<< =headI<x> >> 这种标题标记，记住结束标记 C<< =cut >>，最常用的是以 C<< =pod >> 打头。同样，也可以使用自定义的文档块 C<< ={自定义标记} >>，当然，结束时也不能忘了加 =cut。如下，展示了一个文档中使用 POD 的实例：

    =item stuff()

    This function does stuff.

    =cut

    sub stuff {
      ...
    }

    =pod

    Remember to check its return value, as in:

    C<< stuff() || die "Couldn't do stuff!"; >>

    =cut

有时我们为了快速测试代码效果，我们也可以在代码底部添加 POD 文档区，作为 <DATA> 文件句柄的输入内容，当然，也可以直接使用 __END__ 或 __DATA__ 。

    __END__
    =head1 NAME
    Time::Local - efficiently compute time from local and GMT time

=head2 Perl 模块 POD 文档模板

L<Perl 模块 POD 文档模板|https://github.com/WisdomFusion/perl-pod-reference/blob/master/module-pod-template.pod>。

=head2 POD 常用模块

CPAN 上有很多 POD 解析模块，这里罗列几个推荐模块：

=over

=item * L<Pod::Simple> - POD 解析框架

=item * L<Test::Pod> - 检测 POD 文件中的语法错误

=item * L<Pod::Weaver> weave together a Pod document from an outline.

=item * L<Pod::Perldoc> - perldoc 命令使用的 POD 模块，用于查找 POD 文档中所需的Perl 文档。

=item * L<Pod::Html> - 把 POD 文档转换为 HTML 文件，Perl 核心模块，提供 pod2html命令。

=back

=head2 POD 相关工具

=head3 使用 perldoc 查询 Perl 文档

命令格式如下：

    perldoc [options] docname

可以查看某个模块的文档：

    perldoc Pod::Perldoc

也可以查看某个 Perl 函数的文档：

    perldoc -f function_name

如，

    perldoc -f say
        say FILEHANDLE LIST
        say FILEHANDLE
        say LIST
        say     Just like "print", but implicitly appends a newline. "say LIST"
                is simply an abbreviation for "{ local $\ = "\n"; print LIST }".
                To use FILEHANDLE without a LIST to print the contents of $_ to
                it, you must use a real filehandle like "FH", not an indirect
                one like $fh.
    
                This keyword is available only when the "say" feature is
                enabled, or when prefixed with "CORE::"; see feature.
                Alternately, include a "use v5.10" or later to the current
                scope.

Hah, 如果是不知道如何使用 perldoc 命令，可以执行如下命令看看说明：

    perldoc perldoc

=head3 使用 pod2html

pod2html 命令可以把 *.pod 文件转换为 *.html 文件，即输出成 HTML。具体用法可以查看 perldoc：

    perldoc pod2html

Perl 代码或模块中引用 L<Pod::HTML> 后也可以使用 C<pod2html> 这个函数：

    use Pod::Html;
    
    pod2html("pod2html",
             "--podpath=lib:ext:pod:vms",
             "--podroot=/usr/src/perl",
             "--htmlroot=/perl/nmanual",
             "--recurse",
             "--infile=foo.pod",
             "--outfile=/perl/nmanual/foo.html");

=head3 其他 POD 工具

=over

=item * B<pod2fm> - 把 POD 文档转换为 FrameMaker 格式

=item * B<pod2latex> - 转换为 LaTeX 格式

=item * B<pod2man> - 转换成 UNIX man 手册格式

=item * B<pod2text> - 转换成文本文档

=back

=head2 参考文档
        
=over

=item * C<perldoc perlpod>

=back
